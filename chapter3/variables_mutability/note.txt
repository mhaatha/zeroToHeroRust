Let:
- By default, variables are immutable.
- This is advantages of the safety and easy concurrency that Rust offers.

Constant:
- You cannot use mut with constant. Constants aren’t just immutable by default, they’re always immutable.
- The type of the value must be annotated.
- Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.
- Success:
const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
- Error:
let hour: u32 = 60 * 60;
const THREE_HOURS_IN_SECONDS: u32 = hour * 3;
Reason: Error because "let hour" is obtained at runtime. This is an example of a value that can only be calculated at runtime.  

Shadowing:
-  Rustaceans say that the first variable is shadowed by the second, which means that the second variable is what the compiler will see when you use the name of the variable. 
- Shadowing is different from marking a variable as mut because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword.
- Shadowing can effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name.